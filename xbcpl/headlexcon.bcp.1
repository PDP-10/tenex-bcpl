//  BCPL Compiler -- Declarations for the Lexemes for the
//            Lexical Analyzer.

manifest   //  Declarations for lexemes.
 {
    RNAMECODE_233
    GET          _  #000000 ,, #001001	//    1   get
    RESERVE      _  #000000 ,, #775001	//    2   reserve
    SYNONYM      _  #000000 ,, #774001	//    3   synonym
    UNRESERVE    _  #000000 ,, #773001	//    4   unreserve
REQUEST_#000000,,#653001
REQUIRE_#000000,,#652001
IFDEBUG_#000000,,#651001
CSIZE_#000004,,#654001	//83	csize
    NUMBER       _  #000005 ,, #020001	//   16
    NAME         _  #000005 ,, #021001	//   17
    STRINGCONST  _  #000005 ,, #022001	//   18
    ASCIZCONST	_	#000005,,#362001
    CHARCONST    _  #000005 ,, #023001	//   19
    TRUE         _  #000001 ,, #024001	//   20   true
    FALSE        _  #000001 ,, #025001	//   21   false
    NIL          _  #000001 ,, #026001	//   22   nil
    LV           _  #000000 ,, #027001	//   23   lv
    RV           _  #000004 ,, #030001	//   24   rv
    NOT          _  #000004 ,, #032001	//   26   not
    RH           _  #000004 ,, #033001	//   27   rh
    LH           _  #000004 ,, #034001	//   28   lh
    Q1           _  #000004 ,, #035001	//   29   q1
    Q2           _  #000004 ,, #036001	//   30   q2
    Q3           _  #000004 ,, #037001	//   31   q3
    Q4           _  #000004 ,, #040001	//   32   q4
    LHZ           _  #000004 ,, #354001
    RHZ           _  #000004 ,, #355001
    Q1Z           _  #000004 ,, #356001
    Q2Z           _  #000004 ,, #357001
    Q3Z           _  #000004 ,, #360001
    Q4Z           _  #000004 ,, #361001
    SIZE         _  #000004 ,, #041001	//   33   size
    OFFSET       _  #000004 ,, #735001	//   34   offset
    FPLUS        _  #000000 ,, #043001	//   35
    FMINUS       _  #000000 ,, #044001	//   36
    FMULT        _  #000000 ,, #045001	//   37
    FDIV         _  #000000 ,, #046001	//   38
    FGR          _  #000000 ,, #050001	//   40
    FEQ          _  #000000 ,, #051001	//   41
    FLS          _  #000000 ,, #052001	//   42
    PLUS         _  #000000 ,, #053001	//   43
    MINUS        _  #000000 ,, #054001	//   44
    MULT         _  #000000 ,, #055001	//   45
    DIV          _  #000000 ,, #056001	//   46
    REM          _  #000000 ,, #057001	//   47   rem
    LOGAND       _  #000000 ,, #060001	//   48   logand
    LOGOR        _  #000000 ,, #061001	//   49   logor
    EQ           _  #000000 ,, #062001	//   50   eq
    NE           _  #000000 ,, #063001	//   51   ne
    LS           _  #000000 ,, #064001	//   52   ls
    LE           _  #000000 ,, #065001	//   53   le
    GE           _  #000000 ,, #066001	//   54   ge
    GR           _  #000000 ,, #067001	//   55   gr
    EQV          _  #000000 ,, #070001	//   56   eqv
    NEQV         _  #000000 ,, #071001	//   57   neqv
    EQUIV        _  #000000 ,, #072001	//   58
    NEQUIV       _  #000000 ,, #073001	//   59
    LSHIFT       _  #000000 ,, #074001	//   60   lshift
    RSHIFT       _  #000000 ,, #075001	//   61   rshift
    LSCALE       _  #000000 ,, #701001	//   62   lscale
    RSCALE       _  #000000 ,, #700001	//   63   rscale
    VECAP        _  #000000 ,, #100001	//   64
    RIGHTLUMP    _  #000000 ,, #101001	//   65
    LEFTLUMP     _  #000000 ,, #102001	//   66
    COMCOM       _  #000000 ,, #103001	//   67
    COMMA        _  #000000 ,, #104001	//   68
    COND         _  #000000 ,, #105001	//   69
    ASS          _  #000000 ,, #106001	//   70
    UPLUMP       _  #000000 ,, #107001	//   71
    DOT          _  #000000 ,, #110001	//   72
    RBRA         _  #000004 ,, #111001	//   73
    RKET         _  #000001 ,, #112001	//   74
    TABLE        _  #000000 ,, #113001	//   75   table
    LIST         _  #000000 ,, #114001	//   76   list
    VALOF        _  #000004 ,, #115001	//   77   valof
    RESULTIS     _  #000010 ,, #116001	//   78   resultis
    REPNAME      _  #000000 ,, #117001	//   79   repname
    REPVAL       _  #000000 ,, #120001	//   80   repval
    NUMBARGS     _  #000005 ,, #656001	//   81   numbargs
    LEFTSIDE     _  #000005 ,, #655001	//   82   leftside
    SELECTON     _  #000004 ,, #133001	//   91   selecton
    STATIC       _  #000004 ,, #134001	//   92   static
    EXT          _  #000004 ,, #135001	//   93
    MANIFEST     _  #000004 ,, #136001	//   94   manifest
    INDEX        _  #000004 ,, #640001	//   95   index
    STRUCTURE    _  #000004 ,, #141001	//   97   structure
    LET          _  #000004 ,, #142001	//   98   let
    AND          _  #000000 ,, #143001	//   99   and
    BE           _  #000000 ,, #150001	//  104   be
    VEC          _  #000000 ,, #151001	//  105   vec
    SEMICOLON    _  #000000 ,, #154001	//  108
    END          _  #000000 ,, #155001	//  109
    GOTO         _  #000010 ,, #157001	//  111   goto
    COLON        _  #000000 ,, #160001	//  112
    TEST         _  #000010 ,, #161001	//  113   test
    IFSO         _  #000000 ,, #162001	//  114   ifso
    IFNOT        _  #000000 ,, #163001	//  115   ifnot
    DO           _  #000000 ,, #164001	//  116   do
    OR           _  #000000 ,, #165001	//  117   or
    IF           _  #000010 ,, #166001	//  118   if
    UNLESS       _  #000010 ,, #167001	//  119   unless
    UNTIL        _  #000010 ,, #170001	//  120   until
    WHILE        _  #000010 ,, #171001	//  121   while
    REPEAT       _  #000002 ,, #172001	//  122   repeat
    REPEATUNTIL  _  #000000 ,, #173001	//  123   repeatuntil
    REPEATWHILE  _  #000000 ,, #174001	//  124   repeatwhile
    FOR          _  #000010 ,, #175001	//  125   for
    TO           _  #000000 ,, #176001	//  126   to
    BY           _  #000000 ,, #177001	//  127   by
    SWITCHON     _  #000010 ,, #200001	//  128   switchon
    BRANCHON     _  #000010 ,, #201001	//  129   branchon
    INTO         _  #000000 ,, #202001	//  130   into
    CASE         _  #000010 ,, #203001	//  131   case
    DEFAULT      _  #000010 ,, #205001	//  133   default
    ENDCASE      _  #000012 ,, #206001	//  134   endcase
    BREAK        _  #000012 ,, #210001	//  136   break
    LOOP         _  #000012 ,, #211001	//  137   loop
    RETURN       _  #000012 ,, #212001	//  138   return
    FINISH       _  #000012 ,, #213001	//  139   finish
    ABORT        _  #000012 ,, #563001	//  140   abort
    ERROR        _  #000005 ,, #562001	//  141   error
    SECTBRA      _  #000004 ,, #216001	//  142
    SECTKET      _  #000001 ,, #217001	//  143
    OVERLAY      _  #000000 ,, #220001	//  144   overlay
    BIT          _  #000005 ,, #221001	//  145   bit
    BITB         _  #000005 ,, #222001	//  146   bitb
    BITN         _  #000005 ,, #223001	//  147   bitn
    BYTE         _  #000005 ,, #224001	//  148   byte
    BYTEN        _  #000005 ,, #225001	//  149   byten
    CHAR         _  #000005 ,, #226001	//  150   char
    FILL         _  #000005 ,, #227001	//  151   fill
    WORD         _  #000005 ,, #230001	//  152   word
  }

