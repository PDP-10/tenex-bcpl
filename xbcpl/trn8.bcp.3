
// BCPL Compiler -- Part 8 of Trans --  Process Structure References.

// DoQualName Load a qualified name, returning data describing what
//-- happened.
// EvalSize Return the size in bits of a qualified name.
// *GetTable Get the table for a structure.
// * local to this file.

get "<XBCPL>headtrn"            // Declarations for TRANS.

manifest
{ LoadNeeded  := 1 lshift 26
 }                              // (Bitsperword - offset QN.M - size
                                //-- QN.M ) }   //  QN.M is 1

// This routine is called with the right son of a LEFTLUMP or RIGHTLUMP
//-- node as the first argument.
// The other arguments are described below.
// The routine compiles code to load the offset, and returns a value as
//-- described by the structure QN
// in HEAD.TRN.B, whose fields are as follows...
// W width of the item being accessed, in bits.
// T 0 if logical access, 1 if numeric and 2 if boolean.
// M 0 if nothing loaded, 1 if bit offset loaded, 2 if word offset
//-- loaded.
// N offset in bits to be added to what has been loaded.
// The last three arguments are booleans, which if true do the
//-- following...
// SWwide  permit access to fields of arbitrary width.  (Used in LV
//-- contexts.)
// SWbit  return only bit offset.  That is, QN.M will be either 0 or 2,
//-- but not 1.
// SWnoload Emit no OCODE, used in Lookat.

// This routine is called from
// Load LEFTLUMP, RIGHTLUMP and OFFSET
// LoadLV RIGHTLUMP
// Simpass LEFTLUMP or RIGHTLUMP as the principle operator on the left
//-- of ASS.
// Lookat OFFSET, LEFTLUMP and RIGHTLUMP

let DoQualName(x, SWwide, SWbit, SWnoload) := valof
{ let Table := -1               // Address of the structure definition
                                //-- table.

  and MainSubSw := 0            // Status of subscripting so far, like
                                //-- this...
                                // 0  no subscript or numeric
                                //-- subscript.
                                // 1  calculated subscript, in words.
                                // 2  calculated subscript, in bits.
  and MainSubN := 0             // Accumulated offset in bits.

  and SubSw := nil              // Status of current node, as for
                                //-- MainSubSw.  <0 => no subscript.
  and Sub := nil                // Subscript tree if SubSw _ 1 or 2,
                                //-- and value if SubSw _ 0.

  let Data := 0                 // Put the answer here.
  and W := nil                  // For the width of the data item.
  and OldSSP := SSP             // Save the stack pointer.

  let More := true              // Set at true as long as there are
                                //-- more levels of qualification.

  while More do
  { if #400000 > lh x > 0 do { TransReport(177, x, 0); goto Done }
                                // Cannot happen -- I think.
    More := H1|x eq DOT         // Are there still more levels of
                                //-- qualification?
    let N := More => H2|x, x    // The name or UPLUMP at this level.
    if #400000 > lh N > 0 do { TransReport(177, N, 0); goto Done }
                                // Cannot happen -- I think.
    SubSw := -1                 // No subscript yet at this level.
    if H1|N eq UPLUMP do        // There is a subscript.
    { Lookat(H3+N)              // Optimize the subscript.
      Sub := H3|N               // The piece of tree that is the
                                //-- subscript.
      test #400000 > lh Sub > 0
                                // Is the subscript numeric?
      ifso SubSw, Sub := 0, rv lh Sub
                                // Yes, so remember that fact and the
                                //-- value.
      ifnot                     // No, so remember that fact.
      { if SWnoload resultis LoadNeeded
                                // But quit if called from Lookat.
        SubSw := 1
       }
      N := H2|N                 // The name.
     }

    Table := GetTable(N, Table) // Get the structure definition table
                                //-- for this name.
    if Table eq 0 do goto Done  // Oops -- bad table.

    let RepSw := q3 Table|4     // Are replications expected at this
                                //-- level?

    if SubSw < 0 do             // No subscript encountered at this
                                //-- level.
    { if More & RepSw do        // Complain if subscript was expected
                                //-- and there are more levels.
      TransReport(175, x, 0)
      x := H3|x
      loop
     }

// We get here only if a subscript was found at the current level.

    unless RepSw do             // Complain if subscript found but not
                                //-- expected.
    { TransReport(174, x, 0); x := H3|x; loop
     }

    let F := Table|1            // Offset of zeroth element at this
                                //-- level.
    and S := Table|2            // Size of one replication, in bits.
    and L := lh Table|3         // Lower limit of replication.

    x := H3|x                   // On to the next level.

    if SubSw eq 0 do            // The subscript at this level is
                                //-- numeric.
    { MainSubN := MainSubN + F + Sub * S
                                // Add the offset.
      loop
     }

// There is a non-constant subscript at this level.

    let WordOK :=
      (~ SWbit) & F rem WordSizeOb eq 0 & S rem WordSizeOb eq 0 &
      MainSubSw ne 2

    test WordOK
    ifso F, S := F/WordSizeOb, S/WordSizeOb
    ifnot SubSw := 2

    if MainSubSw eq 1 & ~WordOK do
    { Out2(LN, WordSizeOb); Out1(MULT)
     }
    Load(Sub)                   // Load the subscript.
    unless S eq 1 do { Out2(LN, S); Out1(MULT) }
    unless F eq 0 do { Out2(LN, F); Out1(PLUS) }
    unless MainSubSw eq 0 do Out1(PLUS)
                                // Add it to what came before.
    MainSubSw := SubSw
   }                            // This is the end of the "while More
                                //-- do" repeat block.

// All levels of qualification have been processed.

  W := Table|2                  // Width at this level.
  if SubSw < 0 do W := W * rh Table|3
                                // If no subscript at this level, mult
                                //-- by number of reps.
  if W > WordSizeOb & ~SWwide do { TransReport(173, x, 0); W := 1 }
                                // Width too wide.
  if SubSw < 0 do MainSubN := MainSubN + Table|1
                                // No subscript at the last level.
  Data << QN.W := W             // Width of the item being accessed.
  Data << QN.T := q4 Table|4    // Access type.
  Data << QN.M := MainSubSw     // What sort of thing has been loaded?
  Data << QN.N := MainSubN      // Constant part of the offset.

Done:
  SSP := OldSSP + (SWnoload => 0, 1)
  if PDRMAXSSP < SSP do PDRMAXSSP := SSP
  resultis Data
 }

and EvalSize(x) := valof        // Return the size in bits of a
                                //-- qualified name.
{ let Table := -1

  let More, Sub := true, nil    // more to do? , last element
                                //-- subscripted?
  while More do                 // Work through qualifications.
  { More := H1|x eq DOT         // Is there still more to do after
                                //-- this?
    let N := More => H2|x, x
    Sub := H1|N eq UPLUMP       // Is this element subscripted?
    Table := GetTable(Sub => H2|N, N, Table)
                                // Ignore initial subscripts.
    if Table eq 0 resultis 1    // An error was detected in GetTable.
    x := H3|x
   }

  resultis Table eq 0 => 1, Sub => Table|2, Table|2 * rh Table|3
 }

// Return the structure definition table corresponding to x.  Return 0
//-- for error.

and GetTable(x, Table) := valof
{ unless H1|x eq NAME do { TransReport(-1, x, 0); resultis 0 }
  if Table < 0 do               // The first table ever.
  { let t := CellWithName(x)    // Look up the name.
    if t eq 0 do { TransReport(172, x, H2|x, 0); resultis 0 }
                                // Name not declared.
    unless lh Dvec|t eq STRUCTURE do
    { TransReport(170, 0, H2|x, 0); resultis 0
     }
    resultis Dvec|(t+1)         // Datum returned is the address of the

                                //-- structure definition table.
   }

// We already have a structure.  Look up the next substructure.

  x := H2|x                     // The string itself.
  let U := Table + 4 + q1 Table|4
                                // Last cell to look at.
  for t := Table+5 to U
  do if x eq rv t|0 do resultis rv t
  TransReport(171, 0, x, 0)     // Substructure name not found.
  resultis 0
 }
