In the descriptions below, certain data types are assumed. This section
is an informal introduction to these data types.

CGPointer -- a CGPointer is used for most of the communication
between TRN (the machine-independent part of the tree walk)
and the code generators. A CGPointer has all of the information
needed by the code generators to find the run-time location of
a piece of data. The size (for use in vector statements) of a
CGPointer is PTRSIZ. For the PDP-10, the definition of a CGPointer
is the following:

structure
{ PTR
  { TYPE        bit 18  // LOCAL, GLOBAL, NUMBER, REGISTER,
                        // LABEL, POPSTACK, or PUSHSTACK
    DISP        bitn 18 // Address displacement
    VALUE       word    // For NUMBER, the actual value. Also
                        // used for LOCAL, GLOBAL, REGISTER, LABEL
    LIT         bit 2   // NONE, LIT, POINT (used for byte pointers)
    LV          bitb    // Take the lv of this item
    DEFER       bitb    // Take the rv of this item (indirect)
    INDEX       bit 4   // 0, or 1+Index register number
    PART        bit 12  // RH, LH, etc. 0 for FULLWORD
  }
}

Label -- These are created by TRN to refer to addresses in the
object code. They are composed of two parts, a one or two character
prefix to designate the purpose of the label (BK for break, LP for
loop, etc.) and a number. The subroutine CGParam(Label) prints
the character string representation of the Label. In the examples
below, when a Label argument is shown only the numeric part
is indicated.

LocationType -- The kinds of locations available on the machine.
These are chosen by the implementor of the code generators, and can
vary from machine to machine. On the PDP-10, the types are
WORDMEM, STACK, REG, PAIRREG, plus the special cases RSLTREG, ANYREG,
NOTREG, ANYWHERE, SMASHABLE, ARG1, ARG2, NOTARG, ARG1X, ARG2X, WDPTR.

CGAdjustStack(N)
  Calls:
    TDEFN 40122, 40246, 40283, 40337
    TEVAL 41211
    TJUMP 42155 42157

  Definition in 10STAK 63009.

This subroutine is called to indicate that the stack has grown by
N cells. N will be negative if the stack is smaller. For example,
it is called after a "let" statement has been evaluated to account for
new local variables.

CGApply(Operator, FunctionPtr, NActuals, Lhs,
        ResultPtr, StateVector)
  Calls:
    TTRANS 51176

Definition in 10SUBR 66069

Generates a subroutine calling sequence. FunctionPtr is a CG-pointer to
the value of the subroutine being called. NActuals is the number of
actual arguments to the routine, which have already been evaluated (as well
as the value of "numbargs") and pushed on the stack. Lhs is true if the call
is on the left side of an assignment operator, false otherwise.  ResultPtr
is expected to be returned as a CG-pointer to the value of a function call.
Finally, StateVector is a vector filled by CGPreamble (below) used to remember
the list of registers which were pushed on the stack to be preserved across the
subroutine: they must be restored by CGApply.

CGAssignPtr(CGPointer, CGLocationType)
  Calls:
    TASSN 36150 36171 36221
    TEVAL 41119 41172 41180 41184 41301

  Definition in 10PTR 61215

Creates a CG-pointer to a location of type CGLocationType and returns
this as its value. CGLocationType will either be generated by CGWhere,
PreScan (machine-dependent tree analysis), or CGOpType. This may involve
allocating registers (and hence may generate out-of-register errors, or
require a register save sequence).

CGCanModifyPart(Operator, LeftCG-Pointer, RightCG-Pointer)
  Calls:
    TASSN 36157 36213

  Definition in 10INFO 55384

Returns true if the command L := L op R can be evaluated directly into
memory, given the subword location of the left and right operands. On the
PDP-10 for example, if the operation is "+" then the following is
used: if the left operand is a fullword, then return true (code will use
ADDM instruction); if the left operand is a left half or top quarter (q4),
then the resultis is true if the right operand is a constant (it will then be
shifted to the appropriate point and ADDM used -- other parts can't do
this since there might be overflow from the ADDM to a part of the word that
was not intended).

The code generators will be simpler to write (although the code may be
much less efficient) if this function always returns "false".

CGChainCost(NSimpleCases, NRangeCases, TotalCases, TotalRange)
  Calls:
    TCASE 37240

  Definition in 10CASE 52027

This function returns a cost function used to evaluate alternate methods
of coding a switchon. NSimpleCases is the number of switch branches which
contain a single value. NRangeCases is the number of branches used for
ranges of values (typically from case a to b:). TotalCases is the count
of different values in the switch. TotalRange is the difference between the
minimum value and maximum value in the switch. CGChainCost should return
a cost function to be compared with the costs calculated by CGDispatchCost
and CGHashCost. These cost functions may be optimized for time, space
or a combination of the two. The PDP-10 uses equal weight for time
and space. If the method is not available on the machine, an infinite
cost should be returned.

CGChainCost calculates the time/space cost of doing a switch by ordering
the values and doing a conditional jump for each case range. That is,
the command

switchon A into
{ case 1: return

  case 5 to 6: endcase

  case 100: loop

  default: finish
}

would be coded as

if A < 1 goto W
if A = 1 goto X
if A < 5 goto W
if A < 7 goto Y
if A < 100 goto W
if A = 100 goto Z
W: finish
X: return
Y: endcase
Z: loop

CGCodeWithPtr
  Calls:
    ?

  Definition in 10CODE 53405

CGCompareJump(LeftCGPointer, RightCGPointer, Condition,
              TargetCGPointer, Ignored, BitTestOK)
  Calls:
    TCASE 37275 37281 37284 37307 37310
    TJUMP 42098 42128 42142 42156
    TTRANS 51195 51512

  Definition in 10JUMP 56011

This routine generates code for a conditional jump to the location specified
by TargetCGPointer. If Condition is "true", then this is an unconditional
jump.

Otherwise, BitTest (which is optional and defaults to false) is used
to determine one of two types of conditional jumps. If BitTest if false,
Condition specifies one of the operators EQ, NE, GR, GE,
LS, or LE. The jump should occur if and only if
     (value specified by LeftCGPointer) Condition
     (value specified by RightCGPointer)
is true.

If BitTest is true, the conditional jump is interpreted differently. Condition
will be either EQ or NE. The jump occurs based on the logical-and of
the left and right arguments. If the result is 0 and Condition is EQ, then
the jump occurs. If the result is not 0 and Condition is NE, then the jump
occurs. Otherwise it does not. This is used to allow machines which have
test-and-skip or test-and-jump hardware to utilize these instructions
when the BCPL source is something like
     if (A & B)=0 then ...

CGCopyPtr(FromCGPointer, ToCGPointer)
  Calls:
    TASSN 36162
    TEVAL 41130 41299

  Definition in 10PTR 61207

This function makes a copy of the FromCGPointer into the ToCGPointer.
It returns the value of the ToCGPointer. This is used mainly to copy
a local variable which contains a CGPointer into an argument pointer.

CGData(Type, Data, OptionalName)
  Calls:
    TCASE 37318 37320
    TDATA 39029 39040 30945
    TDEFN 40461

  Definition in 10CODE 53343

This routine is used to output data values for tables, static lists,
and dispatch tables. Type is the kind of data (currently LABEL, GLOBAL,
LV, NUMBER, TRUE, FALSE, CHARCONST and the CG generated pointer types for
these). Data is the data to be output, which depends on the type
(for LABEL, GLOBAL, and LV this will be a label identifier generated
by NextParam. For the others, Data is a number). The OptionalName is
a string identifying the item being stored, which is useful as a
comment in an assembly listing.

CGDispatch(ValueCGPointer, OffsetOfLowest, Label)
  Calls:
    TCASE 37313

  Definition in 10CASE 52009

This routine generates code for the actual dispatch in a dispatch table
implementation of switchon. Prior to the call, code has been generated to
handle out-of-range cases. After the call, a label will be generated
for the first address in the table, and the full set of dispatch addresses
will be output.

ValueCGPointer specifies the current location of the value being
used for the switch (i.e. the location of A in "switchon A into").
OffsetOfLowest is -<lowest specified value>. In other words, it is
the value which must be added to A in order to convert from the
value to a 0 for the 1st entry in the table, 1 for the 2nd, etc.
Label is the label which will be generated for the 1st table entry.
For example, on the PDP-10, if ValueCGPointer refers to AC 2,
OffsetOfLowest is 3 (i.e. the lowest case in the switch is -3), and
the label is L, the code will be JRST @-3(1).

CGDispatchCost(NSimpleCases, NRangeCases, TotalCases, Range)
  Calls:
    TCASE 37243

  Definition in 10CASE 52035

See CGChainCost (above). Calculates the cost of a dispatch table
implementation of a switchon. This calculation should include the
cost of range checking, dispatch, and table size.

CGDynVec(NWords, StackAdjust, CGPointer)
  Calls:
    TDEFN 40252 40260

  Definition in 10STAK 63024

This routine is used to create dynamic vectors on the stack. NWords is
the number of machine words required to store the vector, less 1. (I.e.
a request for vec 0 always results in NWords=0). StackAdjust is the
offset at which the vector is to be stored on the stack (this allows
for lists of vectors). CGPointer must be returned with a CGPointer to
the location on the stack where the vector pointer is stored.

For example, on the PDP-10, if StackAdjust=3, and the current top of
stack known by the compiler is 7, then the code
     MOVEI 2,10(16)
     MOVEM 2,3(16)
would be generated. CGPointer would be returned with a reference to 3(16).

CGEndRoutine(SavedData)
  Calls:
    TDEFN 40207

  Definition in 10SUBR 66049

This routine performs any required "clean up" operations at the end
of a routine definition (NOT at the end of a routine call!). SavedData
is the value of the call to CGEntry (below) which was used to define the
function. On the PDP-10, CGEndRoutine restores the current stack and
maximum stack excursion counters for the outer routine definition. This
allows a routine declaration to be handled inside another.

CGEntry(NameString, EntryLabel, NFormals)
  Calls:
    TDEFN 40184

  Definition in 10SUBR 66049

This routine outputs the subroutine entry code. NameString is the
name of the routine, for use in an assembly listing. EntryLabel
is generated from a call to NextParam, and is the assembler label for
the routine (this will be stored in the static value cell
for the routine). NFormals is the number of formal arguments with
which the routine is defined.

CGEntry returns a value which is stored and passed to CGEndRoutine
when the end of the routine definition is encountered. This is used,
for example, on the PDP-10 to save and restore the current stack top and
maximum stack excursion when defining internal routines.

CGEval(ExpressionTree, ResultCGPointer, ToWhere)
  Calls:
    TEVAL 41142

  Definition in 10EVAL 54065

This routine is the heart of the code generator. It is expected to
generate code to evaluate the expression represented by ExpressionTree.
The location where the result has been stored is returned in
ResultCGPointer. ToWhere indicates the desired type of location
for the result. If it is not possible to evalute the expression to
a location of type ToWhere, the result will be moved as needed outside
of CGEval.

When CGEval is called to evaluate the expression on the left side of
an assignment statement, ToWhere will be ANYWHERE. Therefore, when
ToWhere is ANYWHERE, it is important to only generate sufficient
code to return a CGPointer to the runtime location of the object,
rather than generating the code necessary to actually retrieve that
object.

Because CGEval is so central to the code generator, the PDP-10
routine was coded to be as complete as was convenient at the time.
A rough explanation of the algorithm employed is given below; in order
to facilitate the writing of an initial code generator for a new
machine, an attempt should be made to utilize the existing CGEval.

PDP-10 Algorithm:

First, call CGOpType to locate the optimal locations for the
first and second operands (Arg1Loc and Arg2Loc), as well as
the code generator routine for this operator (ActionFn), the
location of the result of the operation (ResultLoc),
and the "reverse operator" (Revop).

Next, if the tree has been pre-scanned for optimization (which it
is not on the PDP-10), find the actual locations of the first and
second operands (Son1Loc and Son2Loc). Otherwise, Son1Loc and
Son2Loc are set to 0.

Third, decide whether the result of doing the operation as
described in the table will result in having one of the input
operands replaced by the final value (ResultisArg := true),
and which one (ResultLoc := ARG1). This is done based on ResultLoc
as found from CGOpType as follows.

  ...   If ResultLoc is ARG1 (i.e. argument 1 is clobbered)
        or ARG1X (the companion register to argument 1, for
        example the REM operation on the PDP-10), then see if
        there is any overlap between the location of argument 1
        and ToWhere (the desired result location). If there
        is no overlap, then the result is as specified in
        the table. If there is an overlap, set Arg1Loc to
        this location (i.e. the intersection of the ultimate
        destination and the desired location of the first
        argument); if Arg1 is required to be a pair of registers,
        remember this (Arg1Pair := true).

  ...   If ResultLoc is ARG2 or ARG2X, repeat the above algorithm
        with Arg 2 for Arg 1.

  ...   If ResultLoc is WDPTR, the operation will result in a
        modification to the compiler CGPointer for the first argument.
        For example, with RV and VECAP, the result is to set the
        indirect bit in the PDP-10 CGPointer. In this case, the
        result is indeed one of the arguments, and the table will
        have specified which argument.

  ...   If ResultLoc is ANYWHERE, the result is not one of the
        arguments.

  ...   Otherwise, if there is a common location between the desired
        location for the result (ToWhere) and the location listed in
        the table (ResultLoc), use that as the final result location.
        If the desired location of the 1st argument overlaps the
        result location, repeat this switch using this overlap location
        as the desired location of the 1st argument and ARG1 as the
        ResultLoc. If the desired location of the 2nd argument overlaps
        the result location, repeat the switch using the overlap location
        as the desired location of the 2nd argument, and ARG2 as ResultLoc.
        If neither overlaps ResultLoc, the result is not an argument.

Having determined the optimal location for each argument, and the
resulting location of the value, the next step is to actually
do the calculation. This is done by calling EvalNode to evaluate
the first argument (Son1), returning the location of the result in
Arg1Ptr, and attempting to evaluate into Arg1Loc, and similarly
for the second argument. EvalNode, however, does not REQUIRE that
the operations it performs leave the result in the desired type of
location.

Therefore, the next step is to determine how well EvalNode did.
Thus, Arg1Location and Arg2Location are set to the kind of location
in which these results were actually loaded (by calling CGLocationof).
SmashArg1 and SmashArg2 are booleans which record whether the contents
of Arg1 and Arg2 (respectively) may be clobbered. For example, it is
not allowable to clobber a variable, but it is allowed to clobber a
register (this decision is made by the routine CGSmashable).
Finally, Arg1OK and Arg2OK are set to true if the appropriate argument
was evaluated into a location which is both smashable and overlaps
the desired location for that variable (Arg1Loc).

If the predicted result of the operation was to clobber an argument,
ResultisArg is set to match either Arg1OK or Arg2OK. Therefore, if
initially it was expected that Arg1 would be clobbered with the
new result, but after evaluation of the argument it turns out to
be in a non-smashable location, ResultisArg will be set to false.

Before calling the action routine to actually generate code for the
operation, a destination location must be selected if the result
cannot be stored over one of the arguments (i.e. if ResultisArg is
now false). The decision is made in two steps. First, the type of
location is determined: if the ultimate destination is the result
register (RSLTREG), a pair of registers (PAIRREG), a particular
register, or any register (ANYREG), then that is the desired type
of location. Otherwise (WDPTR, ANYWHERE, or STACK) the desired
location is any register (because the PDP-10, and most other machines
can't evaluate operations directly to memory or the stack). Second,
a CGPointer to this kind of location is generated. (If the
operator is commutative, there is an additional step which uses one
of the two operands for the result if this can be done by swapping
the order of the operands.)

Finally, the action function is called. There are actually four
possible ways of calling an action function. The first two are for
unary operators: if called with two arguments the first is a parameter
from CGOpType to distinguish several operations with the same action
function (such as DIV and RDIV), the second argument is the CGPointer
for the operand. If the third argument is missing, then the result
will be stored over the operand; otherwise ResultPtr will be returned
with a CGPointer to the result. The second two are similarly for
binary operators: if called with three arguments they are a parameter
from CGOpType, a CGPointer to the left operand, a CGPointer to the right
operand, and if present the fourth will be a returned CGPointer to the
result.

If the result was returned in an argument, the CGPointer to that
argument is copied into ResultPtr to be returned as the CGPointer
to the result. If the result was not returned in an argument, then
the action routine will have filled in ResultPtr.

CGExtern(NameString, Label)
  Calls:
    TMAIN 46125

  Definition in 10CODE 53450

This routine is called at the end of a compilation to output linkage
information to external variables. NameString is the external name,
and Label (which is optional) is a label used within this compilation
to refer to the same location. On the PDP-10, calling
CGExtern("ABC", EX1) results in the following MACRO-10 statements:
     EXTERN ABC
     EX1=ABC

CGExtGlobal(Label)
  Calls:
    TMAIN 46132

  Definition in 10CODE 53487

This routine is called at the end of a compilation to output linkage
to a global referenced in the program but not defined there. Label is
the external label created from the global number. Thus, calling
CGExtGlobal(15) on the PDP-10 results in
     EXTERN GL10

CGFinish(RootFileName, ListingFileName)
  Calls:
    TMAIN 46087

  Definition in 10MAIN 57150

This subroutine finishes writing the compiler output files, calls
the assembler (if necessary), and cleans up after the code generators.

CGGetOffsetA()
  Calls:
    TMAIN 46138 46146
    TTRANS 51205

  Definition in 10MAIN 57193

This routine, called in order to build the external symbol table (for
BDDT), returns the current relative location in the code section of
the object file.

CGGetOffsetB()
  Calls:
    TMAIN 46138 46146

  Definition in 10MAIN 57194

This routine, called in order to build the external symbol table (for
BDDT), returns the current relative location in the impures (static)
section of the object file.

CGGetPtrPart(CGPointer)
  Calls:
    TEVAL 41118

  Definition in 10PTR 61348

Returns the subword portion of the CGPointer to a value. For example,
it might return FULLWORD, RH, LH, etc. Used in evaluating an expression
if it must be fetched by a full word move, and then only a subword accessed.

CGGetWordFromString(String, Word, ASCIZBoolean)
  Calls:
    TLOOK 44270 44479

  Definition in 10OPS 60578

Returns an object-machine word as though the Word-th word of the
String had been accessed at runtime. If ASCIZBoolean is true, the
string should be treated as though it is in ASCIZ format at runtime;
if it is false, assume BCPL format. This is used to allow for different
machine word sizes and string representations. It is used to evaluate
expressions like "Abcde"|1 and rv 'Acddef' at compile time.

CGHalt()
  Calls:
    TMAIN 46083
    TTRANS 51326

  Definition in 10CODE 53475

This routine is called to generate code for the "finish" statement, and
at the end of compiling a complete program source.

CGHashCost(NSimpleCases, NRangeCases, TotalCases, Range)
  Calls:
    TCASE 37246

  Definition in 10CASE 52039

See description of CGChainCost and CGDispatchCost above. This is
the cost function for doing a hash lookup representation for
switchon. Since there is no code generator for hash lookup on the
PDP-10, this returns an "infinite" value.

CGInit(RootFileName, ListingFileName, RelFileName)
  Calls:
    TMAIN 46079

  Definition in 10MAIN 57093

This routine initializes the code generators. On the PDP-10
it finds and opens the listing and temporary code files, outputs
the TITLE line, and the initial JFCL for BDDT to locate the impures.
It also sets generators to output to the Code segment.

CGIntern(NameString, Label)
  Calls:
    TMAIN 46125

  Definition in 10CODE 53432

This subroutine declares an entry point to the current code, for
use when an external variable or subroutine is defined. NameString
is the name by which it is known outside this module; Label is the
label internally. On the PDP-10, calling CGIntern("ABC", 3) would
result in
     ENTRY ABC
     ABC=EX3

CGIntGlobal(Label)
  Calls:
    TMAIN 46132

  Definition in 10CODE 53477

This subroutines declares an entry point to the current code, for use
when a global variable or routine is defined. Label is the label
for the global variable. For example, calling CGIntGlobal(3) results
in the code
     ENTRY GL3

CGJointLocation(LocationType1, LocationType2)
  Calls:
    TASSN 36169 36220
    TEVAL 41100 41111 41116 41165 41297

  Definition in 10PTR 61353

This subroutines returns a location type which is common to both
LocationType1 and LocationType2. It returns 0 if there is no common
location. For example, on the PDP-10, the common location of RSLTREG
(the result register) and ANYREG would be RSLTREG.

CGJSYSCall
  Calls:
    ?

  Definition in ?

CGLabel(Label)
  Calls:
    TASSN 36194 36197
    TCASE 37117 37256 37314
    TDATA 39021 39061
    TDEFN 40214 40440 40450 40456
    TEVAL 41274 41305 41309
    TJUMP 42032 42046 42048 42056 42058
    TTRANS 51200 51232 51248 51271 51273 51319 51355 51371
           51405 51504 51507 51511 51514 51757 51758 51763 51766

  Definition in 10CODE 53274

This subroutine results in defining Label to be the current
point in the code. [Notice that a label appearing in the
code segment means that a jump to this point may occur, and
therefore the registers or other information must not be
assumed to come from the code immediately prior to this point!].
On the PDP-10, this subroutine outputs the name of the label
followed by  ":" to define the label.

CGLhs(CGPointer)
  Calls:
    TEVAL 41184

  Definition in 10SUBR 66104

This subroutine generates code to load the runtime value of
"leftside" into the location designated by CGPointer. "leftside"
is used within a subroutine to determine whether it has been
called from the right or left side of an assignment statement.

CGLine(CurrentLine)
  Calls:
    TMAIN 46220

  Definition in 10MAIN 57169

This routine is called for each command in the source code. If
a symbol table is being built (SWbits<<UserSwitches.Symtab) then
if any code has been created since the last call to CGLine,
the command
     SymtabStoreCommand(Curline, CGGetOffsetA())
must be given. If the stack has changed, then the command
     SymtabStoreStack(<current stack>, CGGetOffsetA())
must be given. In addition, it may be useful to output the
current line of source text into the listing file. For the most part,
this subroutine could be considered machine independent, except that
it accesses variables internal to the code generator to detect whether
the stack has changed and whether code has been output.

CGLocationof(CGPointer)
  Calls:
    TASSN 36169 36220
    TEVAL 41116 41297

  Definition in 10PTR 61368

This routine returns the type of location referred to by the CGPointer.
On the PDP-10, for example, a pointer of type NUMBERTYPE would return
a location of WORDMEM. This is used primarily to determine whether a
particular expression could be successfully loaded into a desired location.

CGMakePtrLV(CGPointer)
  Calls:
    TEVAL 41195 41198 41226 41232 41238

  Definition in 10PTR 61352

This subroutine takes a pointer to an object, and changes the pointer
into a pointer to the address of that object. It is used, for example,
when a string is referenced: the string is generated, and the resulting
CGPointer is to the string of bytes. CGMakePtrLV is then called to
convert this into a CGPointer to the string pointer (since the value
of the string in BCPL is actually this pointer).

CGModifyPtrpart(CGPointer, Part)
  Calls:
    TASSN 36206
    TEVAL 41128

  Definition in 10PTR 61349

This routine is used to convert a CGPointer from fullword to a subword
pointer. Part is the subword component which is to be referenced,
for example, RH or LH.

CGMove(SourceCGPointer, DestCGPointer, ReleaseSourceBoolean)
  Calls:
    TASSN 36171 36210 36221 36233
    TDEFN 40287
    TEVAL 41119 41300 41308 41338

  Definition in 10MOVE 58009

This routine moves the data referenced by the SourceCGPointer into
the location referenced by the DestCGPointer. If ReleaseSourceBoolean
is true, it then release the pointer to the source. This is used
primarily to force the value of an expression to a desired location
in case it was not initially calculated there.

CGNoStackAdjust(NewStack, CurrentStack)
  Calls:
    TTRANS 51548 51553 51561 51566 51573 51578 51583 51593

  Definition in 10STAK 63016

This routine returns true if it is necessary to adjust the stack
in for it to have the value NewStack. This is used in optimizing
conditional branches where the code to be conditionally executed
consists of a simple jump-type statement, such as "loop" or "endcase".
In these cases, the code will only be optimized to a conditional
jump to the to the loop or endcase label if the jump can be
accomplished without adjusting the stack. This is necessary, for
example, on the PDP-11 where the stack is used by the hardware, and
merely branching out of a loop might cause it to be incorrectly
set. Since the PDP-10 does not use the stack in this manner,
CGNoStackAdjust returns "true", and hence the optimization always
occurs.

CGNumbArgs(CGPointer)
  Calls:
    TEVAL 41180

  Definition in 10SUBR 66097

This routine generates code to move the number of words of arguments
passed at runtime to the current subroutine into the location
specified by CGPointer.

CGOpCanSelfModify(Operator)
  Calls:
    TASSN 36250

  Definition in 10SUBR 66097

This routine returns "true" if the machine is capable of performing
this operation and returning the value into the same memory location
it came from. For example, the ADDM instruction on the PDP-10
allows the operation "+" to be performed in this manner. If this
routine returns "false", no further checks are made for self-modification.
If it returns "true", the left and right operands are computed and
CGCanModifyPart is called to test if the actual store operation can
be performed. To simplify the code generators, this function should
return "false", although this will generate inefficient code.

CGOpType(Operator, lvArg1Location, lvArg2Location, lvResultLocation,
         lvActionRoutine, lvParameter, lvReverseOperator)
  Calls:
    TASSN 36090 36095

  Definition in 10INFO 55075

This routine fills in its lv arguments with information on the optimal
location of its arguments, and the resulting location of the operation.
The ReverseOperator is used if TRN discovers that the operation can be
handled more efficiently with the operands reversed. If ReverseOperator
is 0, the operands cannot be reversed (unless the operator is known
to be commutative). Returns "false" if the operator is unknown (an
error condition) or "true" otherwise. See the description of CGEval
for the PDP-10 for details on the use of the returned values.

CGPlusK(IGNORED, DestinationCGPointer, ConstantCGPointer)
  Calls:
    TEVAL 41155

  Definition in 10OPS 60589

This routine modifies the DestinationCGPointer to reflect the
additional offset from the ConstantCGPointer. This routine is the
action routine for the PLUSK operator, and is called directly from
TRN for PLUSK nodes in the tree. A PLUSK node is generated when
one operand of VECAP is constant, for example, A|2. This is in
order to take advantage of indexing hardware if available on the
target machine.

CGPreamble(NActuals, LeftSide, StateVector)
  Calls:
    TTRANS 51791

  Definition in 10SUBR 66056

This routine is called just prior to pushing the arguments of
a subroutine onto the stack. It generates code for loading the
numbargs and leftside word onto the stack. It should also save
any active registers which must be stored across the subroutine
call, and leave the information about what was stored in StateVector
for use in CGApply to restore the registers. The value of CGPreamble
is the amount by which the stack was changed in the process of
pushing these values onto the stack.

CGReassignPtr(CGPointer)
  Calls:
    TEVAL 41096 41308

  Definition in 10PTR 61258

This routine is used after a CGPointer has been Released via
CGReleasePtr (below) to allow it to be used again. This may
require certain clean-up operations. For example, on the PDP-10
reassigning a pointer to the location after the current top of
stack increments the stack top, reassigning a register requires
that it be marked as in use, etc.

CGReleasePtr(CGPointer)
  Calls:
    TASSN 36062 36105 36106 36176 36177 36236
    TCASE 37255
    TDEFN 40204 40256 40265 40589
    TEVAL 41340
    TJUMP 42106 42107 42130 42131 42146
    TTRANS 51196 51330 51798

  Definition in 10PTR 61285

Releases the pointer (note that it may re-assigned, so that actual
storage must not be freed). This allows for certain clean up operations.
For example, releasing a pointer to a register makes that register
available for re-use.

CGRestoreRegs(SaveRegs, ResultCGPointer)
  Calls:
    TEVAL 41278

  Definition in 10SUBR 66126

This routine is used to generate code to restore registers which were
in use when the corresponding CGSaveRegs was called. For example, registers
which are in use prior to evaluating a "valof" block must be saved and
restored around the block. If ResultCGPointer is not 0, it will be
returned as a pointer to the current result. The value returned by
CGRestoreRegs is the change in the stack top as a result of the restore.

CGRestoreState(StateVec)
  Calls:
    TEVAL 41304 41307

  Definition in 10MAIN 57201

This routine restores the saved CG internal state information. This is
used, for example, when processing a "=>" node to assure that both
branches of the condition have the same registers assigned before
and after execution.

CGReturn(CGPointer)
  Calls:
    TDEFN 40195 40204
    TTRANS 51320

  Definition in 10SUBR 66088

Unless CGPointer is 0, move the data it refers to into the result
location. Then generate code to return from the current function.

CGSaveRegs(StateVector)
  Calls:
    TEVAL 41267

  Definition in 10SUBR 66111

This routine generates code to store the contents of all currently
used registers and records the current usage information
in StateVector. It returns as its value the number of words
added to the stack to hold this information.

CGSaveState(StateVector)
  Calls:
    TEVAL 41295

  Definition in 10MAIN 57196

Stores away all necessary state information for the code generators.
For the PDP-10 this consists of the register usage and current stack
top values.

CGSavespacesize()
  Calls:
    TDEFN 40176 40182
    TTRANS 51573

  Definition in 10SUBR 66096

Returns the number of words on the stack prior to the first local
variable. On the PDP-10 this is 2 (one for the return address, and
one for the number of arguments and leftside).

CGSetSegment(SegmentNumber)
  Calls:
    TDATA 39019 39023 39052 39054 39060 39063
    TDEFN 40428 40462
    TLABEL 43051 43057
    TMAIN 46080 46084

  Definition in 10MAIN 57143

This routine selects the segment into which code will be stored.
The three segments are CODE, IMPURE, and LITERALS. Returns as a
value the previous segment number.

CGSetStack(NWords)
  Calls:
    TDEFN 40209
    TEVAL 41275 41284
    TTRANS 51206 51516 51799

  Definition in 10STAK 63020

This routine is called by TRN to inform the code generators that
the current stack excursion is NWords. This is used, for example,
when generating code for a new subroutine definition to reset the
stack to the number required to hold the formal parameters.

CGString(Label, String, ASCIZBoolean)
  Calls:
    TDATA 39053

  Definition in 10CODE 53504

This subroutine outputs the string String in BCPL format if
ASCIZBoolean is false or in ASCIZ format if ASCIZBoolean is
true. It labels the string with Label.

CGStructureGet(ResultCGPointer, SourceCGPointer, OffsetCGPointer,
               Width, AccessMode, DontRelease)
  Calls:
    TASSN 36150
    TEVAL 41172

  Definition in 10STRU 65163

DontRelease is optional, and defaults to false. AccessMode is
one of LOGICALaccess (i.e. no sign extension), BOOLEANaccess
(i.e. a single bit for true or false), or NUMERICaccess (i.e.
sign extended). Width is the number of bits in the field.

The object denoted by OffsetCGPointer is the number of bits
of offset from bit 0 of the word denoted by SourceCGPointer.
This will always be less than the number of bits in the word.
ResultCGPointer will always specify a register on the PDP-10.

CGStructureGet loads the requested number of bits (Width)
from the part of the word denoted by SourceCGPointer and
OffsetCGPointer into the location specified by ResultCGPointer.

If DontReleasePtrs is true none of the pointers are released.
If it is false, the source and offset pointers are released.

CGStructurePut(SourceCGPointer, DestinationCGPointer,
               OffsetCGPointer, Width)
  Calls:
    TASSN 36175

  Definition in 10STRU 65125

As in CGStructureGet, OffsetCGPointer designates the number of
bits in from bit 0 where the field begins. CGStructurePut stores
into a field of width Width from the value designated by
SourceCGPointer into the location designated by DestinationCGPointer,
offset by OffsetCGPointer bits.

CGStructureRefCalc(FieldNode, ItemCGPointer, OffsetCGPointer)
  Calls:
    TASSN 31648
    TEVAL 41171
    TJUMP 42067

  Definition in 10STRU 65056

A FieldNode can be of two types, FIELD (basically for >>) or
FIELDOFVALUE (for <<). It has 3 sons. The first is a tree
for calculating a cell offset from the base. The second is
a tree for calculating the bit offset within this word. The
third is a structure table.

CGStructureRefCalc returns two CGPointers. ItemCGPointer is
the result of calculating the address of the word being referenced,
and OffsetCGPointer is the result of calculating the offset tree.
See the code for details.

CGStructureTest(SourceCGPointer, Width, OffsetCGPointer,
                JumpIfTrue, TrueLabel, FalseLabel)
  Calls:
    TJUMP 42068

  Definition in 10STRU 65102

Width and OffsetCGPointer are as in CGStructurePut. Generates code
to jump to TrueLabel if the field specified has the value of JumpIfTrue
(i.e. jump to TrueLabel if the field is "true" and JumpIfTrue is also,
or if the field is "false" and JumpIfTrue is also). This is most
conveniently done with bit tests, if the hardware has them.
If the jump to TrueLabel is not taken, and FalseLabel is not 0, then
jump to FalseLabel

CGSuppressStackAdjust()
  Calls:
    TDEFN 40197
    TTRANS 51314 51333

  Definition in 10STAK 63013

This routine is called immediately before TRN attempts to output
a jump when it is known that the stack cover does not need to
be preserved across the jump. In particular, this is done before
the jump to a return sequence since that sequence will restore the
proper stack cover.

CGVector(NCells)
  Calls:
    TDATA 39062
    TDEFN 40460

  Definition in 10OPS 53499

Reserves NCells of space for a vector at the current offset in this
segment.

CGWhere(TRNOperation)
  Calls:
    TASSN 36048 36147 36151 36168
    TCASE 37119
    TEVAL 41153 41165 41170 41302
    TJUMP 42141
    TTRANS 51194 51795

  Definition in 10INFO 55433

Returns the location into which certain TRN operations should
attempt to store values. The current TRN operations are STRUCTUREPUT,
STRUCTUREGET, FIELD, ASSIGN, WhereCOND, CASECONST, PLUSK, GOTOCALL,
COMPAREJUMP, and APPLY.

ConstantPtr(CGPointer, Value)
  Calls:
    TCASE 37276 37282 37285 37308 37310
    TEVAL 41134 41156
    TJUMP 42142
    TTRANS 51488 51804

  Definition in 10PTR 61126

Makes CGPointer into a pointer refering to the constant value Value.

ExtPtr(CGPointer, ExtLabel)
  Calls:
    TEVAL 41224 41242

  Definition in 10PTR 61143

Makes CGPointer into a pointer referring to the external label ExtLabel.

GlobalPtr(CGPointer, GLabel)
  Calls:
    TEVAL 41236 41255

  Definition in 10PTR 61144

Makes CGPointer refer to the global label GLabel.

LabelPtr(CGPointer, Label)
  Calls:
    TCASE 37277 37283 37288 37309 37311
    TEVAL 41192 41197 41230 41245
    TJUMP 42103 42128 42144 42156
    TTRANS 51513

  Definition in 10PTR 61137

Makes CGPointer refer to the label Label.

LocalPtr(CGPointer, StackOffset)
  Calls:
    TEVAL 41212 41250
    TTRANS 51469 51493

  Definition in 10PTR 61150

Makes CGPointer refer to the local with stack offset StackOffset.

NilPtr(CGPointer)
  Calls:
    TEVAL 41137 41189 41218 41221

  Definition in 10PTR 61171

Makes CGPointer refer to a nil pointer.

RegisterPtr(CGPointer, R)
  Calls:
    TEVAL 41252

  Definition in 10PTR 61120

Makes CGPointer refer to register number R.

StackTopPtr(CGPointer)
  Calls:
    TDEFN 40286
    TEVAL 41337

  Definition in 10PTR 61163

Makes CGPointer refer to the top of the stack. Has a side
effect of increasing the top of the stack. Hence it acts as
a PUSH.

