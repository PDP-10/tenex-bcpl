	.TITLE RUNTIM
	.SBTTL J. BURCHFIEL SEPT 19, 1973


;Added changes for 16K, seperate stack for traps - E. Mader Dec., 4, 73
; Inserted changes nec. for MDT. E. Mader  Oct. 24, 1973


	; THIS PACKAGE PROVIDES AN INTERFACE BETWEEN
	; THE INTERRUPTS AND THE BCPL ROUTINES WHICH
	; SERVICE THEM. ON AN INTERRUPT, A NEW STACK FRAME IS
	; CONSTRUCTED AND THE APPROPRIATE BCPL
	; ROUTINE IS CALLED AT PRIORITY LEVEL.

	; ALSO INCLUDED IS THE STARTUP ROUTINE TO INITIALIZE
	; THE TRAP AND INTERRUPT VECTORS.

	; DEFINITIONS OF TRAP VECTORS

	ADRVEC=4
	INSVEC=10
	BPTVEC=14
	IOTVEC=20
	PWRVEC=24
	EMTVEC=30
	TRPVEC=34

	; DEFINITION OF INTERRUPT LEVELS FOR PS

	LEV7=340
	LEV6=300
	LEV5=240
	LEV4=200
	LEV3=140
	LEV2=100
	LEV1=40
	LEV0=0

	; REGISTER DEFINITIONS

	R0=%0
	R1=%1
	R2=%2
	R3=%3
	R4=%4
	R5=%5
	SP=%6
	PC=%7

	; INTERRUPT VECTORS FOR PERIPHERALS

	TKVEC=60	; TTY KEYBOARD
	TPVEC=64	; TTY PRINTER
	CLKVEC=100	; 60 HZ CLOCK
	LPTVEC=200	; LINE PRINTER
	IMPIVC=170	; IMP INPUT
	IMPOVC=174	; IMP OUTPUT

	; SPECIAL PROCESSOR REGISTERS

	PS=177776
	STKLIM=177774


	; MEMORY SIZE OF 16K WORDS

	MAXADR=157777

	; SETUP STACK

	STKSIZ=400
	STACK=MAXADR & -1000	; Address of stack base
	STKTOP=STACK-STKSIZ	; Address of top of stack
	MDTSTK=STACK+200	; MDT's stack is above regular stack

	.EXTRN GL1
	.EXTRN ADRPI,INSPI,BPTPI,IOTPI,PWRPI,EMTPI,TRPPI,TCIPI
	.EXTRN TCOPI,LPTPI,CLKPI,IMPIPI,IMPOPI
	.ENTRY SPBASE
	.EXTRN MDT


	.ENTRY BEG

BEG:	BR  BEG1		; Normal entry, reset stuff
	BR  RUNMDT		; Normal+2, run MDT

BEG1:	MOV #STACK-2,SP		; Establish stack pointer
	MOV #STKTOP-400,STKLIM	; Set Stack Limit Register

	; CLEANUP TRANSFER VECTOR

	CLR R0

CLRLP:	CLR (R0)+
	CMP R0,#400
	BLT CLRLP

	;SETUP TRAP VECTORS

	MOV #TRPTAB,R0
	MOV #ADRVEC,R1

TRPFIL:	MOV (R0)+,(R1)+
	CMP R0,#TRPEND
	BLT TRPFIL

	; SETUP INTERRUPT VECTORS FOR PERIPHERALS

	MOV #TTIN,TKVEC		; TTY KEYBOARD
	MOV #LEV4,TKVEC+2
	MOV #TTOUT,TPVEC	; TTY PRINTER
	MOV #LEV4,TPVEC+2
	MOV #LPOUT,LPTVEC	; LINE PRINER
	MOV #LEV4,LPTVEC+2
	MOV #CLKINT,CLKVEC	; 60 HZ CLOCK
	MOV #LEV4,CLKVEC+2
	MOV #IMPIN,IMPIVC	; IMP INPUT
	MOV #LEV4,IMPIVC+2
	MOV #IMPOUT,IMPOVC	; IMP OUTPUT
	MOV #LEV4,IMPOVC+2




; FAKE A BREAKPOINT TRAP, AND START MDT. WHEN MDT PROCEEDS
; IT WILL START THE USER'S PROGRAM

RUNMDT:	CLR -(SP)
	MOV #START,-(SP)
	JSR R5,TRP
	MDT

	; GO AND RUN THE USER'S PROGRAM

START:	MOV SP,R5
	CLR -(SP)
	JSR PC,@GL1		; Call user prog.
	HALT
	BR BEG


	; HERE ARE THE INTERRUPT ENTRIES- PASS EVENTS TO USER
	; DEFINED BCPL HANDLERS

TTIN:	JSR R5,INT
	TCIPI

TTOUT:	JSR R5,INT	; CALL TCOPI
	TCOPI

LPOUT:JSR R5,INT
	LPTPI		; CALL LPTPI

CLKINT:	JSR R5,INT	; CALL CLKPI
	CLKPI

IMPIN:	JSR R5,INT
	IMPIPI		; CALL IMPIPI

IMPOUT:	JSR R5,INT	; CALL IMPOUTPI
	IMPOPI

	; HERE ARE THE TRAP ENTRIES- PASS EVENTS TO USER
	; DEFINED BCPL HANDLERS

ADRINT:	JSR R5,TRP
	ADRPI		; CALL ADRPI

INSINT:	JSR R5,TRP	; CALL INSPI
	INSPI

BPTINT:	JSR R5,TRP
	BPTPI		; CALL BPTPI

IOTINT:	JSR R5,INT
	IOTPI		; CALL IOTPI

PWRINT:	JSR R5,INT
	PWRPI		; CALL PWRPI

EMTINT:	JSR R5,INT
	EMTPI		; CALL EMTPI

TRPINT:	JSR R5,INT
	TRPPI		; CALL TRPPI

	; HERE IS THE INTERFACE TO BCPL. SAVE THE REGISTERS,
	; SET UP A NEW STACK FRAME, AND CALL THE INDICATED BCPL
	; ROUTINE. ON RETURN FROM THE ROUTINE, RESTORE THE REGISTERS,
	; AND DEBREAK FROM THE INTERRUPT.

INT:	MOV R4,-(SP)
	MOV R3,-(SP)
	MOV R2,-(SP)
	MOV R1,-(SP)
	MOV R0,-(SP)
	MOV (R5),R5		; Get pointer to routine
	MOV (R5),-(SP)		; Get routine address
	MOV SP,R5
	CLR -(SP)
	JSR PC,@(R5)		; Call routine
	MOV (SP)+,R0
	MOV (SP)+,R1
	MOV (SP)+,R2
	MOV (SP)+,R3
	MOV (SP)+,R4
	MOV (SP)+,R5
	RTT



;
;    Routine to handle eror traps. Builds a new stack at MDTSTK,
;  which contains PS, PC, SP, R5-R0 for MDT. On return from the
;  trap handeling routine, the PS and PC are pushed back onto the
;  regular stack because MDT may have changed them.
;CALL:	JSR R5,TRP
;	<Pointer to routine>
;

TRP:	MOV (SP)+,MDTSTK-6	; "Push" old R5 (from JSR)
	MOV (SP)+,MDTSTK-2	; "Push" saved PC
	MOV (SP)+,MDTSTK	; "Push" saved PS
	MOV SP,MDTSTK-4		; "Push" old SP
	MOV #MDTSTK-6,SP	; Set new SP to reflect "pushes"
	MOV R4,-(SP)		; Save registers
	MOV R3,-(SP)
	MOV R2,-(SP)
	MOV R1,-(SP)
	MOV R0,-(SP)
	MOV SP,SPBASE		; Save base for MDT
	MOV @(R5),-(SP)		; Get address of routine to call
	MOV SP,R5		; Establish frame base
	CLR -(SP)		; Zero Arguements
	JSR PC,@(R5)		; Call routine
	MOV (SP)+,R0		; Restore registers
	MOV (SP)+,R1
	MOV (SP)+,R2
	MOV (SP)+,R3
	MOV (SP)+,R4
	MOV (SP)+,R5
	MOV (SP)+,SP		; Restore old stack
	MOV MDTSTK,-(SP)	; Push saved PS (MDT may have changed)
	MOV MDTSTK-2,-(SP)	; Ditto saved PC
	RTT			; Return




	; TABLE FOR FILLING THE TRAP VECTOR

TRPTAB:	.WORD ADRINT,LEV7
	.WORD INSINT,LEV7
	.WORD BPTINT,LEV5
	.WORD IOTINT,LEV3
	.WORD PWRINT,LEV6
	.WORD EMTINT,LEV3
	.WORD TRPINT,LEV3
TRPEND:	.WORD 0


SPBASE:	0			; Stack base for MDT

	.END BEG
