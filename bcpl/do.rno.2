^^
The DO Sub-System
.blank 1
.indent 3
   DO is a sub-system for expanding  a  parameterized  text

string  from  a  specified  file, and passing the result  to the EXEC for execution.

Parameters are indicated in the source (text) file by a %  character,

followed either by 

.indent 6
      1.  a digit, or

.indent 6
      2.  a character other than % or an alphabetic or a digit,  followed  by

an  arbitrary  text  string  not  containing  the character,

followed by the second instance of the character.


.blank 1
.indent 3
   For each parameter, the user is asked  for  a  text  word

(arbitrary   text   delimited  by  space,  tab,  or  cr)  to

substitute for each instance of the parameter in  the  input

text  string.  He is prompted for this word by the digit, if

a parameter of type 1, or by the textstring, if a  parameter

of  type  2.   Each uniquely named parameter is prompted for

only once, even if it is used several  times  in  the  input

text string.

.blank 1
.indent 3
The % character has two other uses:
.indent 6
   1.   Two adjacent % characters expand

to a single % character (this is an escape

convention for % characters in the expanded text string).  


.indent 6
2. A % character followed by an alphabetic character form a unit which
expands into a particular string, depending on the alphabetic character, as
follows:
.indent 9
%C => name of directory to which this job is connected
.indent 9
%D => date and time
.indent 9
%J => job number for this job
.indent 9
%L => name of directory under which this job logged in
.indent 9
%R => #milliseconds of run time used by this job so far
.indent 9
%T => (octal) number of TTY attached to this job


.blank 1
.indent 3
The DO program expands the parameterized input string into a temporary text
file, then makes this file the "PRIMARY INPUT FILE" (in place of the TTY) for the EXEC in a lower fork.
.blank 1
.indent 3
DO is designed to allow user type-ahead while it or the lower EXEC is running, and to allow interruption by control-c , and subsequent resumption via the CONTINUE command.
The DO program terminates with a message when either the lower fork terminates, or the end-of-file is read in its primary input file.

