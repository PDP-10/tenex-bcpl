// The BCPL Compiler -- Main Program.

// Start The Main Program
// Abort
// *RSclck
// *getargs
// *upperstuff
// *upperpull
// *isdot
// DictRetFree	//dummy definition for the dictionary package
// *Wrtime	print elapsed time
// Newvec	Return n+1 locations from free space

get "<bcpl>utilhead"
get "<bcpl>dicthead"
get "<bcpl>head"
get "<XBCPL>headbcpl"
get "<XBCPL>headlex"

structure                       // Option switches local to this file
                                //-- only.
{ SWlocal
  { byte 2                      // Skip over global switches.
    Tree bitb                   // Produce listing of the AE-tree, as
                                //-- produced by CAE.
    Tree2 bitb                  // Produce listing of the optimized
                                //-- AE-tree after Trans.
    Nocg bitb                   // Terminate compilation after Trans,
                                //-- before Code Generation.
    File bitb                   // Compiler output to the file
                                //-- ".name.m".
   }
 }

external
{ lslide                        // routine to overlay loader for CCL
                                //-- LOADER! cmd
 }

manifest
{ Empty  := 0                   // one of the values returned by Kind
                                //-- in LEX.
// used here to initialize Chkind
SWInit_#402000,,0	//initial (default) settings for compiler switches
 }

//home base for statics, all of which are local
static
{ TreeStream:  0                // if tree output is desired, the
                                //-- stream
  cclbool:     false            // set true for subsequent times thru,
                                //-- if ccl
  cmdinstream: 0                // primary input  (command) stream

// for it goes here

  Greeting:    "***s"           // Prompt string
  upperpptr:   #441100400000    // byte pointer for OCODE input
  uppersptr:   #441100400000    // byte pointer for OCODE output
  RealTime:    0
  RunTime:     0
  FreelistP:   0
  FreelistT:   0
  FreelistC:   0
  FreelistL:   0
  rootname:    0
  listingname: 0
  relname:     0
  sourcename:  0
  ocodename:   0
  treename:    0
  messagename: 0
 }

let Start(Entrance) be
{main

restart:

// Initialize global statics for MAIN

  let v:=vec 220
  rootname:=v
  listingname:=v+100
  relname:=v+120
  sourcename:=v+140
  ocodename:=v+160
  treename:=v+180
  messagename:=v+200
  upperpptr:=#441100400000      // byte pointer for OCODE input
  uppersptr:=#441100400000      // byte pointer for OCODE output
  jimtbptr:=lv jimtbl
  jimbytptr:=POINT(7,#400000)
  Warns:=0
  Cautions:=0
  Reportcount:=0
  GetnameP:=0
  StaticN:=0
  NextParameter:=0
  rootname|0:=0
  listingname|0:=0
  relname|0:=0
  sourcename|0:=0
  ocodename|0:=0
  treename|0:=0
  messagename|0:=0
  RequireTable|0:=0             // number of 2-word entries
  RequestTable|0:=0             // ditto

  let cclnm:="000BCP.TMP"
  test Entrance=0 then cclnm:=0
  or
  { static
    { v: vec 20
     }
    JSYS(#13,v)                 // GJINF
    let x:=v|3
    for i:=0 to 5 do v|i:=0
    let stf(bs,ch) be
    { v|0:=v|0+1
      v|(v|0):=ch
     }
    let jf:=CreateOutput(-stf)
    WriteN(jf,x)
    EndWrite(jf)
    x:=0
    for i:=1 to v|0 do x:=(x lshift 9)\v|i
    cclnm|0:=(cclnm|0 & (#777000,,0)) \ x \ #60060060
   }

  unless cclbool do cmdinstream:=FindInput(cclnm)
  INPUT:=cmdinstream

  { let v:=vec 20
    static
    { cdn: 0
     }
    unless cdn=0 do EndRead(cdn)
    v|1:=#100001,,0
    v|2:=-1,,'<bcpl>compdict.sav'
    unless JSYS(#20,v)=2
    do Help("BCPL: can't find <bcpl>compdict.sav*n")
    cdn:=rh v|1
    v|1:=#400000,,rh v|1
    JSYS(#200,v)                // get
   }

  RestoreDict(#400,DictOffset,1)
  let FREELISTSTART:=DictOffset|0+DictOffset

// init LEX variables

  ReadAhead:=false
  LastItem:=0
  SWcontrol:=false

  B:=false
  LineP:=0
  Chkind:=Empty
  NLPending:=false
  FreelistP:=FREELISTSTART

// Pointer to free storage list for tree

  FreelistT:=FREELISTSTART+#77777

// Top of the free storage list for tree

  FreelistC:=FREELISTSTART

// Bottom of free storage list for tree

  FreelistL:=0
  ConsoleStream := CreateOutput(0)
                                // Stream to console.
  OUTPUT := ConsoleStream

  SWupper:=false

// Find out what the user wants.

  getargs(Entrance=1)           // makes rootname, sourcename, relname,
                                //-- listingname, and SWbits
  if Entrance=1 do SWbits<<SWlocal.File:=true

// Open a stream for compiler comments and error messages.

  MONITOR :=SWbits << SWlocal.File => valof
  { let filechars:=rootname|0
    rootname|(filechars+1):=$.
    rootname|(filechars+2) := $g
    rootname|(filechars+3) := $;
    rootname|(filechars+4) := $T
    rootname|0 := filechars+4
    Packstring(rootname,messagename)
    rootname|0:=filechars
    resultis CreateOutput(messagename)
   }
  , ConsoleStream

  WriteS("[BCPL:*s")
  WriteS(sourcename)
  WriteS("]*n")

  OUTPUT := MONITOR

  if SWbits << SW.Synrep do SWbits << SWlocal.Tree2 := false
  if SWbits << SW.Help do Help("About to start compiling. End of readparameters in Main1")

  let v := vec ExtDeclT
  ExtDecl, ExtDeclS := v, 0     // External declarations.

  let v := vec GetnameT
  GetnameV := v                 // Names of files included in the
                                //-- compilation.
  for k := 0 to GetnameT do GetnameV|k := 0
                                // Clear the names.

Compile:                        // Come here to start compiling.
  { let Tree := Newvec(0)       // The AE-tree goes here when it has
                                //-- been constructed.

    if SWbits << SW.Debug do
    { WriteS("Tree starts at ")
      WriteOct(Tree)
      PBOUT($*n)
     }
    WriteS("CAE:  ")
    RSclck()
    ConstructTree(Tree,sourcename)
                                // DO THE WORK.

    if SWbits << SW.Debug do
    { WriteS("*nAE-Tree size _ ")
      WriteN(FreelistL + FreelistP - FreelistC)
      WriteS("[Decimal], from ")
      WriteOct(Tree)
      WriteS(" to ")
      WriteOct(FreelistP)
      PBOUT($*n)
     }
    Wrtime()
    if SWbits << SW.Pprep goto Terminate

    if SWbits << SWlocal.Tree \ SWbits << SWlocal.Tree2 do
                                                           // He wants
                                                           //-- a
                                                           //-- listing
                                                           //-- of the
                                                           //-- AE-tree.
    { treename:=Newvec(20)
      let t := rootname|0
      rootname|(t+1):=$.
      rootname|(t+2):=$y
      rootname|0:=t+2
      Packstring(rootname,treename)
      rootname|0:=t
      WriteS("AE-Tree to file ")
      WriteS(treename)
      PBOUT($*n)
      TreeStream := CreateOutput(treename)
      OUTPUT := TreeStream
      WriteS("*nAE-Tree for ")
      WriteS(sourcename)
      WriteS("*n*n")
      if SWbits << SWlocal.Tree do
      { Curfile := -1
        Plist(rv Tree, 0, 40)
        unless SWbits << SWlocal.Tree2 do
        { EndWrite(OUTPUT)
          TreeStream := 0
         }
       }
      OUTPUT := MONITOR
     }

    if SWbits << SW.Synrep do goto Compile

    if SWbits << SW.Symtab do SymtabInit(SWupper)
                                // Initialize the symbol table.
    unless Reportcount eq 0 do
    { Abort()
      test Entrance=1 then
      { cclbool:=true
        goto restart
       }
      or finish
     }
    WriteS("TRN:  ")
    { let t := rootname|0
      rootname|(t+1):=$.
      rootname|(t+2):=$o
      rootname|0:=t+2
      Packstring(rootname, ocodename)
      rootname|0:=t
     }

    Ocode:=
      (SWbits<<SW.Ocode)=>CreateOutput(ocodename,9),
      CreateOutput(-upperstuff,9)
    TranslateTree(rv Tree)      // DO THE WORK.

    if SWbits << SW.Debug do
    { WriteS("Total tree space = ")
      WriteN(FreelistL + FreelistP - FreelistC)
      WriteS(" words.*nOcode length = ")
      { let v:=vec 20
        v|1:=Ocode
        unless JSYS(#43,v)=2 do Help("RFPTR failed on Ocode file*n")
        WriteN(v|2/4)
       }
      WriteS(" words*n")
     }
    EndWrite(Ocode)
    Wrtime()
    if SWbits << SW.Symtab do SymtabTransEnd()

    if SWbits << SWlocal.Tree2 do
                                  // He wants the tree printed with
                                  //-- optimizations marked.
    { OUTPUT := TreeStream
      if SWbits << SWlocal.Tree do PBOUT($*p)
                                   // New page.
      WriteS("Optimized Tree.*n*n")
      Plist(rv Tree, 0, 40)
      EndWrite(OUTPUT)
      OUTPUT := MONITOR
      TreeStream := 0
     }
    unless Reportcount eq 0 do
    { Abort()
      test Entrance=1 then
      { cclbool:=true
        goto restart
       }
      or finish
     }
   }

  unless SWbits << SWlocal.Nocg do
  {codegenerate
    INPUT:=
      (SWbits<<SW.Ocode)=>FindInput(ocodename,9),
      FindInput(-upperpull,9)
    WriteS("CG:   ")
    if SWbits << SW.Help do Help("About to start Code Generator. Help call in Main1")
    { let snm:=vec 20
      Packstring(rootname,snm)
      Cg(snm,relname,listingname,rootname)
                                // do all of the work
     }

    EndRead(INPUT)

    Wrtime()
    unless Reportcount eq 0 do
    { Abort()
      test Entrance=1 then
      { cclbool:=true
        goto restart
       }
      or finish
     }
   }codegenerate

Terminate:
  if SWbits << SW.Symtab do
  { let symbtabname:=vec 20
    let t:=rootname|0
    rootname|(t+1):=$.
    rootname|(t+2):=$s
    rootname|0:=t+2
    Packstring(rootname,symbtabname)
    rootname|0:=t
    SymtabFinish(symbtabname)
   }
  unless OUTPUT eq ConsoleStream do
  { EndWrite(OUTPUT)
    OUTPUT := ConsoleStream
   }
  unless TreeStream eq 0 do EndWrite(TreeStream)

  if (Cautions > 0 \ Warns > 0) & SWbits << SWlocal.File
  do                            // Tell him he had warnings.
  { WriteS("Compilation of ")
    WriteS(sourcename)
    WriteS(" produced ")
    WriteS(Warns > 0 => "warnings", "cautions")
    PBOUT($*n)
    unless MONITOR=ConsoleStream do
    { WriteS("See file: ")
      WriteS(messagename)
      Writech($*n)
     }

   }
  if SWbits << SW.Help do Help("Normal Compiler Termination!!! Help in Main1")
  if Entrance=1 do
  { cclbool:=true
    goto restart
   }
  finish
 }main

and Abort() be
{ unless MONITOR eq ConsoleStream do EndWrite(MONITOR)
  unless TreeStream eq 0 do EndWrite(TreeStream)

  OUTPUT := ConsoleStream
  WriteS("Compilation of*s")
  WriteS(sourcename)
  WriteS("*saborted*n")
  if SWbits<<SWlocal.File do
  { WriteS("BCPL compiler messages were written in file: ")
    WriteS(messagename)
    Writech($*n)
   }
  if SWbits << SW.Help do Help("Help call before Aborting")
  rv #42:=rv #42+1
 }

and RSclck() be
{ let X_vec 20
 JSYS(#14,X)
  RealTime:=X|1
  X|1:=-5
  JSYS(#15,X)
  RunTime:=X|1
 }
// Computes rootname,sourcename, listingname, relname, and SWbits.

and getargs(cclsw) be
{ commands:
  unless cclsw do WriteS(Greeting)
  SWbits:=SWInit
  let v:=vec 100
  v|0:=0
  { Ch:=PBIN()
    if cclsw&EofFlg do Ch:=0
    switchon Ch into
    { default:  v|0:=v|0+1
                v|(v|0):=Ch
      case $*s:
      case $*t: endcase

      case $^a: test v|0 > 0 then
                { Writech($\)
                  Writech(v|(v|0))
                  v|0:=v|0-1
                  endcase
                 }
                or
                { Writech($^g)
                  endcase
                 }
      case $^q: v|0:=0
                WriteS("##*n")
                endcase

      case 0:
      case $^z: if cclsw do
                { let v:=vec 20
                  v|1:=INPUT
                  unless JSYS(#26,v)=2 do Help("DELF failed*n")
                 }
                finish
      l:
      case $?:  SWbits:=SWInit
                WriteS("*n[<rel name>[,<listing name>]_]<source name>[switches>]<cr>*n")
                WriteS("(Type HELP<cr> for more help)*n")
      case $^r: Writech($*n)
                WriteS(Greeting)
                for i:=1 to v|0 do Writech(v|i)
                endcase

      case $^[:
      case $*n:
      case $*c:
      case $*l: if v|0 > 0 do break
     }
   }
  repeat
  if cclsw & (v|(v|0)=$!) do
  { let v1:=vec 30
    let v2:=vec 20
    Unpackstring("<subsys>",v1)
    for i:=1 to v|0-1 do
    { v1|0:=v1|0+1
      v1|(v1|0):=v|i
     }
    v1|0:=v1|0+1
    v1|(v1|0):=$.
    v1|0:=v1|0+1
    v1|(v1|0):=$s
    v1|0:=v1|0+1
    v1|(v1|0):=$a
    v1|0:=v1|0+1
    v1|(v1|0):=$v
    Packstring(v1,v2)
    StringToASCIZ(v2,v1)
    v2|1:=#100001,,0
    v2|2:=-1,,v1
    unless JSYS(#20,v2)=2 do Help("GTJFN failed for loader*n")
    lslide(rh v2|1)
   }
  if v|0=4 &
     (v|1&#137)=$H &
     (v|2&#137)=$E &
     (v|3&#137)=$L &
     (v|4&#137)=$P
 do
  { WriteS("*n[<rel name>[,<listing name>]_]<source name>[switches>]<cr>*n*n")
    WriteS("Square brackets mean optional*n*n")
    WriteS("If unspecified, the source file name is assumed to have a .BCP extension*n*n")
    WriteS("If the rel name is missing, the output rel file will be named*n*s*s*s <source name>.REL*N*n")
    WriteS("if the listing name is given with no extension, the extension*nis assumed to be *"LST*"*n*n")
    WriteS("Switches:*n*t/u*tConvert each uppercase alphabetic character in the*n*t*tsource files to lowercase as it is read in, unless it is*n*t*tpreceded by the character *a, or the word it is in*n*t*tis preceded by two *a characters. This is useful for *n*t*tBCPL source files which are prepared on an all upper*n*t*tcase terminal.*n")
    WriteS("*t/c*tCause compilation to terminate before code generation.*n")
    WriteS("*t/d*tCompile lines that start with *"::ifdebug*"*n")
    WriteS("*t/f*tDivert compiler messages to a file named *n*t*t<source file name>.g;T*n*t/s*tDo not output a symbol table (binary) file as a side effect*n*t*tof this compilation. Normally, the file will be output and named*n*t*t<source file name>.s*n*n")
    goto commands
   }
  let snm:=vec 100
  snm|0:=0
  let lnm:=vec 100
  lnm|0:=0
  let rnm:=vec 100
  rnm|0:=0
  let nm:=rnm
  for i:=1 to v|0
  do
  { switchon v|i into
    { default:
         nm|0:=nm|0+1
         nm|(nm|0):=v|i
         loop

      case $,:
         { let t:=0
           for i:=1 to nm|0
           do test nm|i=$. then
              { t:=i-1
                break
               }
              or t:=i
           if t > 6
           do
           { WriteS("output file names must be less than 7 characters long*n")
             goto commands
            }
          }
         nm:=lnm
         loop

case $=:
      case $_:
         { nm:=snm
           loop
          }
      case $/:
         { if i=v|0 do goto l
           switchon v|(i+1)\#40 into
           { default: goto l

             case $u: SWupper:=true
                      endcase

             case $s: SWbits<<SW.Symtab:=false
                      endcase

             case $d: DebugSW:=true ; endcase

             case $l: SWbits<<SW.SymtabLong:=false ; endcase
             case $w: SWbits<<SW.Debug:=true
                                // wizard
                      endcase

             case $h: SWbits<<SW.Help:=true
                      endcase

             case $f: SWbits<<SWlocal.File:=true
                      endcase

             case $o: SWbits<<SW.Ocode:=true
                      endcase

             case $y: SWbits<<SW.Synrep:=true
                      endcase

             case $p: SWbits<<SW.Pprep:=true
                      endcase

             case $e: SWbits<<SWlocal.Tree2:=true
                      endcase

             case $t: SWbits<<SWlocal.Tree:=true
                      endcase

             case $c: SWbits<<SWlocal.Nocg:=true
                      endcase
            }
           if i+1=v|0 do break
           i:=i+2
           unless v|i=$/ do goto l
           loop
          }
         repeat
         break
     }

   }
  if snm|0=0 & rnm|0 ne 0 & lnm|0 ne 0 do goto l
  if snm|0=0 & rnm|0=0 do
  { let t:=lnm
    lnm:=snm
    snm:=t
   }
  if snm|0=0 & rnm|0 ne 0 do
  { let t:=rnm
    rnm:=snm
    snm:=t
   }
  if rnm|0=0 do
  { for i:=1 to snm|0
    do test snm|i=$. then break
       or test snm|i=$> then rnm|0:=0
          or
          { rnm|0:=rnm|0+1
            rnm|(rnm|0):=snm|i
           }

   }
  unless isdot(snm) do
  { snm|(snm|0+1):=$.
    snm|(snm|0+2):=$B
    snm|(snm|0+3):=$C
    snm|(snm|0+4):=$P
    snm|0:=snm|0+4
   }
  unless (lnm|0 = 0) \ isdot(lnm) do
  { lnm|(lnm|0+1):=$.
    lnm|(lnm|0+2):=$L
    lnm|(lnm|0+3):=$S
    lnm|(lnm|0+4):=$T
    lnm|0:=lnm|0+4
   }
  unless isdot(rnm) do
  { rnm|(rnm|0+1):=$.
    rnm|(rnm|0+2):=$R
    rnm|(rnm|0+3):=$E
    rnm|(rnm|0+4):=$L
    rnm|0:=rnm|0+4
   }
  Packstring(snm,sourcename)
  Packstring(lnm,listingname)
  Packstring(rnm,relname)
  for i:=1 to snm|0
  do test snm|i=$. then break
     or test snm|i=$> then rootname|0:=0
        or
        { rootname|0:=rootname|0+1
          rootname|(rootname|0):=snm|i
         }
 }

// called for each ocode character output, if putting the ocode into
// high segment, rather than into a file

and upperstuff(bs,ch) be
{ IDPB(ch,lv uppersptr)
 }

// called by BIN for ocode which was put out to high seg.

and upperpull(bs):=valof
{ EofFlg:=false
  test upperpptr=uppersptr
  then
  { EofFlg:=true
    resultis $*e
   }
  or resultis ILDB(lv upperpptr)
 }

and isdot(v):=valof
{ for i:=1 to v|0
  do if v|i=$. do resultis true
  resultis false
 }

and DictRetFree() be Help("DictRetFree called*n")
and Wrtime() be                 // Print elapsed time.
{ let Run, Real := RunTime, RealTime
  RSclck()
  WriteN(RunTime-Run);WriteS(" ms in ")
  WriteN((RealTime-Real)/1000); WriteS(" secs*n")
 }

and Newvec(N) := valof
{ let X := FreelistP
  FreelistP := FreelistP + N + 1
  if FreelistP > FreelistT do
  { BCPLreport(240)
    finish                      // no room to expand
   }
  resultis X
 }


and ruppersptr()_SWbits<<SW.Ocode=>rfptr(Ocode),uppersptr

and suppersptr(p) be 
{ test SWbits<<SW.Ocode then sfptr(Ocode,p) or uppersptr_p
}

